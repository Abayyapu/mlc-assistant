(()=>{var e,t="",n=!1,l=null,o=[];function s(){n&&(document.getElementsByClassName("modalWrapper")[0].remove(),n=!1)}chrome.storage.sync.get({inlineMode:!1},t=>{console.log("Inline mode set to",e=t.inlineMode)}),document.addEventListener("keydown",function(i){let a=i.key;if("Escape"===a&&s(),n){let n=document.getElementById("modalInput");"Enter"==a&&n===document.activeElement&&function(){if(e){l=function(){let e=Array.from(document.getElementsByClassName("cm-content")[0].childNodes),n=e.flatMap((e,n)=>{if("cm-line"!=e.className)return null;let l=e.innerHTML.replace(/<\/?[^>]+(>|$)/g,"");return l.length>0&&(t.includes(l)||l.includes(t))?n:null}).filter(e=>e).pop();return e[n]}();let e=document.createElement("div");e.className="cm-line",e.innerHTML="% Begin AI Generated Content:",l.insertAdjacentElement("afterend",e),l=e;let n=document.createElement("div");n.className="cm-line",l.insertAdjacentElement("afterend",n),l=n,o=[n]}else console.log("showing action bar"),document.getElementById("actions").style.display="flex",document.getElementById("modalWrapper").style.height="65px";console.log("showing action bar2");let n=document.getElementById("modalInput");console.log("showing action bar3",n.value),chrome.runtime.sendMessage({input:n.value,selection:t,source:"modal"}),e&&s()}()}}),chrome.runtime.onMessage.addListener((i,a,d)=>(i.showModal&&(console.log("Showing model"),function(){var e,l,o,i,a,d,c;s();let r=window.getSelection();"Range"==r.type?(e=r.getRangeAt(0).getBoundingClientRect(),console.log("Selected text:",t=window.getSelection().toString())):(e=document.getElementsByClassName("cm-activeLine")[0].getBoundingClientRect(),console.log("No text selection"),console.log(window.getSelection())),console.log("bounds",e);let m=document.getElementsByClassName("cm-content")[0],p=(l=e,(o=document.createElement("div")).className="modalWrapper",o.id="modalWrapper",o.style.top=l.bottom+5+"px",o.style.left=l.left+15+"px",o.style.width=m.offsetWidth-30+"px",o.style.height="40px",o.style.display="flex",o.style.position="absolute",o.style.flexDirection="column",o);document.body.appendChild(p);let g=((i=document.createElement("div")).className="answer",i.id="answer",i.style.width=m.offsetWidth-30+"px",i);p.appendChild(g);let u=((a=document.createElement("div")).className="actions",a.id="actions",a.style.width=m.offsetWidth-30+"px",a.style.height="20px",a.style.display="flex",document.getElementById("modalWrapper").style.height="65px",a.style.flexDirection="row-reverse",(d=document.createElement("button")).textContent="replace",d.style.fontSize="10px",d.style.backgroundColor="transparent",d.style.border="none",d.style.marginRight="10px",d.style.color="rgba(255, 255, 255, 0.6)",d.addEventListener("click",()=>{(function(e){let n=Array.from(document.getElementsByClassName("cm-line")).filter(e=>{let n=e.innerHTML.replace(/<\/?[^>]+(>|$)/g,"");return!!(n.length>0&&t.includes(n))});console.log("replacing",n),n.length>0&&(n[0].innerHTML=e,n.length>1&&n.slice(1).forEach(e=>{e.remove()}))})(document.getElementById("answer").innerHTML)}),a.appendChild(d),(c=document.createElement("button")).textContent="Good Answer",c.style.fontSize="10px",c.style.backgroundColor="transparent",c.style.border="none",c.style.marginRight="5px",c.style.color="rgba(255, 255, 255, 0.6)",a.appendChild(c),a);p.appendChild(u);let y=function(e,t,n){var l=document.createElement("div");l.className="modal",l.style.height="40px",l.style.width=e.offsetWidth-2*n+"px",l.style.display="flex",l.style.position="relative";var l=document.createElement("div");l.className="modal",l.style.height="40px",l.style.width=e.offsetWidth-2*n+"px",l.style.display="flex",l.style.position="relative",t.appendChild(l);let o=document.createElement("div");o.style.width="32px",o.style.height="32px",o.style.display="flex",o.style.alignItems="center",o.style.justifyContent="center",o.style.marginLeft="3px";let s=document.createElement("img");s.style.height="20px",s.style.width="20px",s.src=chrome.runtime.getURL("icons/wand-64.png"),o.appendChild(s);let i=document.createElement("div");i.style.flexGrow=1,i.style.height="32px",i.display="flex",i.alignItems="center";let a=document.createElement("input");return a.type="search",a.placeholder="How can I help?",a.className="modalInput",a.id="modalInput",i.appendChild(a),l.appendChild(o),l.appendChild(i),l}(m,p,15);p.appendChild(y),document.getElementById("modalInput").focus(),n=!0}()),i.incomingMessage&&console.log("INCOMING MESSAGE"),i.message&&(console.log("content got message",i.message),function(t){if(e){if(t.split(/\r?\n/).length>o.length){let e=document.createElement("div");e.className="cm-line",l.insertAdjacentElement("afterend",e),l=e,o.push(e),l.scrollIntoView()}t.split(/\r?\n/).forEach(function(e,t){o[t].innerHTML=e})}else{let e=document.getElementById("answer");e.textContent=t,e.style.padding="5px",e.style.height="auto",e.scrollTop=e.scrollHeight,e.parentNode.style.height="auto",document.getElementById("modalInput").value=""}}(i.message)),!0))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
