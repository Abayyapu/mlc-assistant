(()=>{var e,t="",n=!1,l=null,o=[];function s(){n&&(document.getElementsByClassName("modalWrapper")[0].remove(),n=!1)}function i(n){if(n?console.log("regen input",document.getElementById("question").value):document.getElementById("modalInput"),e){l=function(){let e=Array.from(document.getElementsByClassName("cm-content")[0].childNodes),n=e.flatMap((e,n)=>{if("cm-line"!=e.className)return null;let l=e.innerHTML.replace(/<\/?[^>]+(>|$)/g,"");return l.length>0&&(t.includes(l)||l.includes(t))?n:null}).filter(e=>e).pop();return e[n]}();let e=document.createElement("div");e.className="cm-line",e.innerHTML="% Begin AI Generated Content:",l.insertAdjacentElement("afterend",e),l=e;let n=document.createElement("div");n.className="cm-line",l.insertAdjacentElement("afterend",n),l=n,o=[n]}else{document.getElementById("actions").style.display="flex";let e=document.getElementById("question");e.style.display="flex",e.textContent=input.value,e.value=input.value,document.getElementById("modalWrapper").style.height="85px"}chrome.runtime.sendMessage({input:input.value,selection:t,source:"modal"}),e&&s()}chrome.storage.sync.get({inlineMode:!1},t=>{console.log("Inline mode set to",e=t.inlineMode)}),document.addEventListener("keydown",function(e){let t=e.key;if("Escape"===t&&s(),n){let e=document.getElementById("modalInput");"Enter"==t&&e===document.activeElement&&i(!1)}}),chrome.runtime.onMessage.addListener((d,a,c)=>(d.showModal&&(console.log("Showing model"),function(){var e,l,o,d,a,c,r,m,p;s();let u=window.getSelection();"Range"==u.type?(e=u.getRangeAt(0).getBoundingClientRect(),console.log("Selected text:",t=window.getSelection().toString())):(e=document.getElementsByClassName("cm-activeLine")[0].getBoundingClientRect(),console.log("No text selection"),console.log(window.getSelection())),console.log("bounds",e);let g=document.getElementsByClassName("cm-content")[0],y=(l=e,(o=document.createElement("div")).className="modalWrapper",o.id="modalWrapper",o.style.top=l.bottom+5+"px",o.style.left=l.left+15+"px",o.style.width=g.offsetWidth-30+"px",o.style.height="45px",o.style.display="flex",o.style.position="absolute",o.style.flexDirection="column",o);document.body.appendChild(y);let h=((d=document.createElement("div")).className="question",d.id="question",d.placeholder="this is the question",d.style.width=g.offsetWidth-30+"px",d.style.height="30px",d.style.display="none",d.textContent="",d.style.padding="5px",d);y.appendChild(h);let f=((a=document.createElement("div")).className="answer",a.id="answer",a.style.width=g.offsetWidth-30+"px",a);y.appendChild(f);let x=((c=document.createElement("div")).className="actions",c.id="actions",c.style.width=g.offsetWidth-30+"px",c.style.height="20px",c.style.display="none",c.style.flexDirection="row-reverse",(r=document.createElement("button")).textContent="replace",r.style.fontSize="10px",r.style.backgroundColor="transparent",r.style.border="none",r.style.marginRight="10px",r.style.color="rgba(255, 255, 255, 0.6)",r.addEventListener("click",()=>{(function(e){let n=Array.from(document.getElementsByClassName("cm-line")).filter(e=>{let n=e.innerHTML.replace(/<\/?[^>]+(>|$)/g,"");return!!(n.length>0&&t.includes(n))});console.log("replacing",n),n.length>0&&(n[0].innerHTML=e,n.length>1&&n.slice(1).forEach(e=>{e.remove()}))})(document.getElementById("answer").innerHTML)}),c.appendChild(r),(m=document.createElement("button")).textContent="Good Answer",m.style.fontSize="10px",m.style.backgroundColor="transparent",m.style.border="none",m.style.marginRight="5px",m.style.color="rgba(255, 255, 255, 0.6)",c.appendChild(m),(p=document.createElement("button")).textContent="Regenerate",p.style.fontSize="10px",p.style.backgroundColor="transparent",p.style.border="none",p.style.marginRight="5px",p.style.color="rgba(255, 255, 255, 0.6)",p.addEventListener("click",()=>{console.log("clicked regen"),i(!0)}),c.appendChild(p),c);y.appendChild(x);let E=function(e,t,n){var l=document.createElement("div");l.className="modal",l.style.height="40px",l.style.width=e.offsetWidth-2*n+"px",l.style.display="flex",l.style.position="relative";var l=document.createElement("div");l.className="modal",l.style.height="40px",l.style.width=e.offsetWidth-2*n+"px",l.style.display="flex",l.style.position="relative",t.appendChild(l);let o=document.createElement("div");o.style.width="32px",o.style.height="32px",o.style.display="flex",o.style.alignItems="center",o.style.justifyContent="center",o.style.marginLeft="3px";let s=document.createElement("img");s.style.height="20px",s.style.width="20px",s.src=chrome.runtime.getURL("icons/wand-64.png"),o.appendChild(s);let i=document.createElement("div");i.style.flexGrow=1,i.style.height="32px",i.display="flex",i.alignItems="center";let d=document.createElement("input");return d.type="search",d.placeholder="How can I help?",d.className="modalInput",d.id="modalInput",i.appendChild(d),l.appendChild(o),l.appendChild(i),l}(g,y,15);y.appendChild(E),document.getElementById("modalInput").focus(),n=!0}()),d.incomingMessage&&console.log("INCOMING MESSAGE"),d.message&&(console.log("content got message",d.message),function(t){if(e){if(t.split(/\r?\n/).length>o.length){let e=document.createElement("div");e.className="cm-line",l.insertAdjacentElement("afterend",e),l=e,o.push(e),l.scrollIntoView()}t.split(/\r?\n/).forEach(function(e,t){o[t].innerHTML=e})}else{let e=document.getElementById("answer");e.textContent=t,e.style.padding="5px",e.style.height="auto",e.scrollTop=e.scrollHeight,e.parentNode.style.height="auto",document.getElementById("modalInput").value=""}}(d.message)),!0))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
